# -*- coding: utf-8 -*-
"""q3main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ngoef_l6IKhxJ7RAF8r_bvz-WhBSd96X
"""

import numpy as np
import time
from numpy import genfromtxt
import matplotlib.pyplot as plt

##3.1
print("Part 3.1")
train_data = np.genfromtxt("/content/q2_train_set.txt" , delimiter = ',')
def training(data,alpha,trainsett):
  N1 = np.sum(data[0:trainsett,160]) ##summming the last column for class label 1 or 0
  data1 = data[0:trainsett, :]
  feats = data1.shape[1]
  N = data1.shape[0]

  N0 = N - N1 ##remaining are labelled 0
  T0 = sum(data1[data1[0:N, feats-1] == 0, 0:feats-1] )  ##storing th sum of each acid labelled 0
  T1 = sum(data1[data1[0:N, feats-1] == 1, 0:feats-1] ) 
  sT0 = np.zeros(160)
  sT1 = np.zeros(160)
  for i in range(1,9):
    sT0[(i-1)*20:i*20] = np.sum(T0[(i-1)*20:i*20])  #total number of acids labelled 0
    sT1[(i-1)*20:i*20] = np.sum(T1[(i-1)*20:i*20])
  
  theta0 = (T0 + alpha)/(sT0+2*alpha) ##probability of each acid labelled 0
  theta1 = (T1 + alpha)/(sT1+2*alpha)
  pi0 = N0/N #probability of 8mer labelled 0
  pi1 = N1/N
  return theta0,theta1,pi0,pi1

train1 = training(train_data,0,train_data.shape[0])

test_data = np.genfromtxt("/content/q2_test_set.txt" , delimiter = ',') #storing test data

#method for testing so that can be used later
def testing(data, theta0, theta1, pi0, pi1):
  testrow = data.shape[0]
  prob0 = np.zeros((testrow,8)) ##storing individual prob of each amino acid at ith position
  prob1 = np.zeros((testrow,8))
  amacid = 0

  for row in range(testrow): ##running for loop to store at which position does the amino acid occurs
    for j in range(data.shape[1]-1):
      if data[row,j] == 1:
        prob0[row,amacid] = theta0[j] #storing probability of each amino acid occuring
        prob1[row,amacid] = theta1[j]
        amacid+=1
    amacid=0

  classlbl = np.zeros((data.shape[0]))
  probs0 = np.zeros((data.shape[0]))

  probs1 = np.zeros((data.shape[0]))
  probs0 = np.prod(prob0, axis =1)*pi0 ##storing the probs of each 8mer under naive condition
  probs1 = np.prod(prob1, axis =1)*pi1
  #print(probs1)
  classlbl[probs1>probs0] = 1 #if prob of class 1 is greater than class 0 then label it 1
  #print(sum(classlbl))
  return classlbl,probs0,probs1

lbl1 = testing(test_data, train1[0], train1[1], train1[2], train1[3])
accuracy1 = ((sum(lbl1[0]==test_data[:,160]))* 100/528)
print("Accuracy is ", accuracy1)


##3.2
print("Part 3.2")
gag_sequence = np.genfromtxt("/content/q2_gag_sequence.txt", dtype=np.str)
gag_seqnp = np.array([gag_sequence.tolist()[i] for i in range(len(gag_sequence.tolist()))])
gagSeqnp = np.zeros((493,161))
acidstrng = 'gpavlimcfywhkrqnedst'
#Associating arrays with characters
Dict = {
  'g' : np.array([1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  'p' : np.array([0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  'a' : np.array([0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  'v' : np.array([0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  'l' : np.array([0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  'i' : np.array([0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  'm' : np.array([0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0]),
  'c' : np.array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0]),
  'f' : np.array([0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0]),
  'y' : np.array([0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0]),
  'w' : np.array([0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0]),
  'h' : np.array([0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0]),
  'k' : np.array([0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0]),
  'r' : np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0]),
  'q' : np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0]),
  'n' : np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0]),
  'e' : np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0]),
  'd' : np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0]),
  's' : np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]),
  't' : np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1])
}

#------------------------------------------------------

row1 = 0
col1 =0

acids = 0

while acids<500:
  if col1 == 160:
    col1 = 0
    row1 += 1
    acids -= 7
  if gag_seqnp[acids] == 'g':
    gagSeqnp[row1, col1:col1+20] = Dict['g']
  elif gag_seqnp[acids] == 'p':
    gagSeqnp[row1, col1:col1+20] = Dict['p']
  elif gag_seqnp[acids] == 'a':
    gagSeqnp[row1, col1:col1+20] = Dict['a']
  elif gag_seqnp[acids] == 'v':
    gagSeqnp[row1, col1:col1+20] = Dict['v']
  elif gag_seqnp[acids] == 'l':
    gagSeqnp[row1, col1:col1+20] = Dict['l']
  elif gag_seqnp[acids] == 'i':
    gagSeqnp[row1, col1:col1+20] = Dict['i']
  elif gag_seqnp[acids] == 'm':
    gagSeqnp[row1, col1:col1+20] = Dict['m']
  elif gag_seqnp[acids] == 'c':
    gagSeqnp[row1, col1:col1+20] = Dict['c']
  elif gag_seqnp[acids] == 'f':
    gagSeqnp[row1, col1:col1+20] = Dict['f']
  elif gag_seqnp[acids] == 'y':
    gagSeqnp[row1, col1:col1+20] = Dict['y']
  elif gag_seqnp[acids] == 'w':
    gagSeqnp[row1, col1:col1+20] = Dict['w']
  elif gag_seqnp[acids] == 'h':
    gagSeqnp[row1, col1:col1+20] = Dict['h']
  elif gag_seqnp[acids] == 'k':
    gagSeqnp[row1, col1:col1+20] = Dict['k']
  elif gag_seqnp[acids] == 'r':
    gagSeqnp[row1, col1:col1+20] = Dict['r']
  elif gag_seqnp[acids] == 'q':
    gagSeqnp[row1, col1:col1+20] = Dict['q']
  elif gag_seqnp[acids] == 'n':
    gagSeqnp[row1, col1:col1+20] = Dict['n']
  elif gag_seqnp[acids] == 'e':
    gagSeqnp[row1, col1:col1+20] = Dict['e']
  elif gag_seqnp[acids] == 'd':
    gagSeqnp[row1, col1:col1+20] = Dict['d']
  elif gag_seqnp[acids] == 's':
    gagSeqnp[row1, col1:col1+20] = Dict['s']
  elif gag_seqnp[acids] == 't':
    gagSeqnp[row1, col1:col1+20] = Dict['t']
  col1+=20
  acids+=1

labl2 = testing(gagSeqnp, train1[0], train1[1], train1[2], train1[3])
gagSeqnp[:,160] = labl2[0]

print("The cleavages are ")
n=0
for i in range(493):
  if  gagSeqnp[i,160] == 1:
   print(((n)+3, (n)+4),end = ", ")
  n+=1
print()

##part 3.3
print("Part 3.3")
maxstrt = np.where(labl2[2]==np.max(labl2[2]))[0].tolist()[0]
minstrt = np.where(labl2[1]==np.min(labl2[1]))[0].tolist()[0]
max1prob8mer = "".join(gag_seqnp[maxstrt:maxstrt+8].tolist())
min0prob8mer = "".join(gag_seqnp[minstrt:minstrt+8].tolist())
print("The 8mer labeled 1 with highest probability is ", max1prob8mer)
print("The 8mer labeled 0 with lowest probability is ",min0prob8mer)


#3.4
print("Part 3.4")
#training with all variables
accuracy2 = []
for i in range(11):
  train2 = training(train_data,i,6062)
  lbl2 = testing(test_data, train2[0], train2[1], train2[2], train2[3])
  accuracy2.append(sum(lbl2[0]==test_data[:,160]) * 100/528)

print("Accuracies with the full sample are ", accuracy2)
plt.figure()
plt.plot(range(11), accuracy2, 'bs')
plt.xlabel("alpha")
plt.ylabel("full sample accuracy%")
#training with 75 variables
accuracy3 = []
for i in range(11):
  train3 = training(train_data,i,75)
  lbl3 = testing(test_data, train3[0], train3[1], train3[2], train3[3])
  accuracy3.append(sum(lbl3[0]==test_data[:,160]) * 100/528)
plt.figure()
plt.plot(range(11), accuracy3, 'bs')
plt.xlabel("alpha")
plt.ylabel("75 sample accuracy%")
print("Accuracies with the 75 sample are ",accuracy3)


#part3.5
print("Part 3.5")
from math import inf
import numpy as np

N11 = np.sum(train_data[train_data[:,160]==1,0:160]==1, axis=0)
N01 = np.sum(train_data[train_data[:,160]==1,0:160]==0, axis=0)
N10 = np.sum(train_data[train_data[:,160]==0,0:160]==1, axis=0)
N00 = np.sum(train_data[train_data[:,160]==0,0:160]==0, axis=0)

N = N00 + N01 + N10 + N11 
N0 = N01 + N00
N1 = N10 + N11
Nc1 = N01 + N11
Nc0 = N00 + N10
mutualI = (N11/N)*np.log2(N*N11/(N1*Nc1))+(N01/N)*np.log2(N*N01/(N0*Nc1))+(N10/N)*np.log2(N*N10/(N1*Nc0))+(N00/N)*np.log2(N*N00/(N0*Nc0))


def nantoinf(nparray, vals):
  abc = len(np.where(np.isnan(nparray))[0].tolist())
  wherenan = np.where(np.isnan(nparray))[0].tolist()
  for x in range(0,abc):
    nparray[wherenan[x]] = vals

nantoinf(mutualI, inf)
arraysorting = mutualI.argsort()
sortedmutualI =  mutualI[arraysorting[::-1]]

newarraysort = np.flip(arraysorting)

def testing2(data, theta0, theta1, pi0, pi1):
  testcol = data.shape[0]
  amacid = 0
  probs0 = np.zeros((data.shape[0]))
  probs1 = np.zeros((data.shape[0]))
  classlbl = np.zeros(((data.shape[0]),160))
  for j in range(1,161): ##running for loop to store at which position does the amino acid occurs
    prob0 = np.zeros((160)) ##storing individual prob of each amino acid at ith position
    prob1 = np.zeros((160))
    for row in range(testcol):
      for i in range(0,j):
        if data[row,(newarraysort[i])] == 1:
          prob0[amacid] = theta0[(newarraysort[i])] #storing probability of each amino acid occuring
          prob1[amacid] = theta1[(newarraysort[i])]
          amacid+=1
      probs1[row] = np.prod(prob1[0:amacid])
      probs0[row] = np.prod(prob0[0:amacid])
      amacid=0
      probs0 = probs0*pi0 ##storing the probs of each 8mer under naive condition
      probs1 = probs1*pi1
      #print(probs0)
      classlbl[probs1>probs0,j-1] = 1 #if prob of class 1 is greater than class 0 then label it 1
      #print(classlbl[:,j-1])
  return classlbl
#for i in range(1,161):
ss = testing2(test_data,train1[0], train1[1],train1[2],train1[3])
 
acc= []
for fd in range(160):
  acc.append(sum(ss[:,fd]==test_data[:,160])/528*100)
plt.figure()
plt.plot(range(1,161), acc)
plt.xlabel("k")
plt.ylabel("accuracy%")
acca = np.asarray(acc)
print("The indexes of highest accuracy are ", np.where(acca == np.max(acca)))
print("The highest accuracy is ", np.max(acca)) # acc.append((sum(ss==test_data[:,160])/528)*100)


##Part 3.5
print("Part 3.6")
from numpy import linalg as LA
x_ = np.mean(train_data[:,0:160], axis =0)
x = (train_data[:, 0:160] - x_)
covx =(np.transpose(x).dot(x))/(train_data.shape[0]-1)
eigval, eigvec = LA.eig(covx)
eigval_real = np.real(eigval)
eigvec_real = np.real(eigvec)
matrix_w = eigvec[:,0:3]
y = train_data[:,0:160].dot(matrix_w)

with plt.style.context('seaborn-whitegrid'):
  fig = plt.figure()
  fig.set_size_inches(40,30)
  ax = fig.add_subplot(111, projection='3d')
  # for lab, col in zip(('Iris-setosa', 'Iris-versicolor', 'Iris-virginica'),
  #                     ('blue', 'red', 'green')):
  ax.scatter(y[train_data[:,160] ==1,0],
              y[train_data[:,160] ==1,1],
              y[train_data[:,160] ==1,2],
             label = "Label: 1",
              c='b')
  ax.scatter(y[train_data[:,160] ==0,0],
              y[train_data[:,160] ==0,1],
              y[train_data[:,160] ==0,2],
             label = "Label: 0",
              c='r')
  plt.xlabel('Principal Component 1', fontsize=40)
  plt.ylabel('Principal Component 2', fontsize=40)
  ax.set_zlabel('Principal Component 3', fontsize=40)
  ax.legend(loc='upper center', fontsize=40)
  # plt.tight_layout()
  plt.show()

propOvariance = eigval[0:3]*100/np.sum(eigval)
print("The PVE are ", propOvariance)

